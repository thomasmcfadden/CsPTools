#!/usr/bin/perl

# analyzer v0.1.4 copyright 2005 Thomas McFadden

# This file is part of CsPTools.

#    analyzer is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.

#    analyzer is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with Foobar; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA



# this needs commenting!!!

# v0.1.5 (18.4.2007): at the request of Ann Taylor, i've added options
# to handle up to 20 columns of codes.  the stuff in here that handles
# the column options is so stupid i can't stand it, but i don't have
# time now to figure out how to do it in a smart way that just
# eliminates the limit.

# v0.1.4 (6.9.2005): eliminated use of symbolic references to
# handle column restriction options.  using hash instead.  oh yeah.
# should, however, come up with even more flexible way to do that,
# since i still have the built-in limitation to 9 columns, which is
# lame.

# v0.1.3 (5.9.2005): added in ability to search for codes that don't
# match a certain pattern, i.e. the complement of something.  might be
# good to do an option that gives how many have a thing and how many
# don't for immediate comparison, fixed another bug related to cases
# where the relevant coding column is empty.  the handling of this
# remains ugly though and should be fixed at some point.

# v0.1.2: made the short options work properly.  switched -r to
# --regex from --rank.  some minor fixes to handle things properly
# when a code contains less columns than expected.  also now going to
# try to get it to handle multiple input files properly

use CsPTools('find_code_string', 'get_cspt_version');
use warnings;
use strict;
use Getopt::Long;
#Getopt::Long::Configure ("bundling");
#$one, $two, $three, $four, $five, $six, $seven, $eight, $nine, 

our (%cols, $count, $edit, $rank, %ranker, $list, $xy, @codes, $regex,
     $version, $help, $quit);

# instead of separate global scalars for each column option, put them
# all in a ahash %cols with the column numbers as keys.  avoids use of
# symbolic references.

# in v0.1.5 i've eliminated the unnecessary use of the numbers hash
# converting integers to strings.  i don't even remember what that was
# for, but now it certainly isn't needed.  i've also added options for up
# to 20 columns.  the way that this is handled is really, really stupid,
# but i still don't know how to get GetOptions to work with options names
# which aren't determined until like runtime or whatever.  sigh.

GetOptions ('1=s' => \$cols{"1"},
	    '2=s' => \$cols{"2"},
	    '3=s' => \$cols{"3"},
	    '4=s' => \$cols{"4"},
	    '5=s' => \$cols{"5"},
	    '6=s' => \$cols{"6"},
	    '7=s' => \$cols{"7"},
	    '8=s' => \$cols{"8"},
	    '9=s' => \$cols{"9"},
	    '10=s' => \$cols{"10"},
	    '11=s' => \$cols{"11"},
	    '12=s' => \$cols{"12"},
	    '13=s' => \$cols{"13"},
	    '14=s' => \$cols{"14"},
	    '15=s' => \$cols{"15"},
	    '16=s' => \$cols{"16"},
	    '17=s' => \$cols{"17"},
	    '18=s' => \$cols{"18"},
	    '19=s' => \$cols{"19"},
	    '20=s' => \$cols{"20"},
	    'c|count' => \$count,
	    'e|edit' => \$edit,
	    'n|rank|num=i' => \$rank,
	    's|sort=i' => \$list,
	    'x|xy=s' => \$xy,
	    'r|regex' => \$regex,
	    'v|version' => \$version,
	    'h|help' => \$help,
	    'q|quit' => \$quit,
	    ) or die "Aborting...\n";

my $version_number = "0.1.4";

my $cspt_version = &get_cspt_version;

sub version {
    print "analyzer v$version_number (CsPTools v$cspt_version)\n";
}

if ($version) {
    &version;
    exit;
}

if ($help) {
    my $format = "%3s %-13s %-8s %s\n";
    my $indent = "\t\t\t     %-50s\n";
    print "\n\n";
    print "This is "; 
    &version;
    print "\n\tAnalyze (multicolumn) codes in a CorpusSearch output file.\n\n";
    print "Usage:\n\tanalyzer [options] file\n\n";
    print "Command-line options:\n";
    printf $format, "-1,", "... -9", "<string>", 
    "Restrict to codes with <string> as column 1, ... 9";
#    printf $format, "-c,", "--count", "", 
#    "Print simple count of codes appearing in each column";
    printf $format, "-e,", "--edit", "", 
    "Edit sentences matching query in emacs";
    printf $format, "-h,", "--help", "", "Print this helpful message";
    printf $format, "-q,", "--quit", "", "Print results and quit.  Don't prompt for editing.";
    printf $format, "-n,", "--rank, --num", "<#>", 
    "List values for column <#> with number of matches";
    printf $indent, "for each, sorted by number";
    printf $format, "-s,", "--sort", "<#>", 
    "List values for column <#> with number of matches";
    printf $indent, "for each, sorted by value";
    printf $format, "-r,", "--regex", "", "Treat <string> following -1 ... -9 as a";
    printf $indent, "regular expression";
    printf $format, "-v,", "--version", "", "Print version information";
    printf $format, "-x,", "--xy", "<a:b>", 
    "Print as table, with values from column <a> on";
    printf $indent, "x-axis and values from column <b> on y axis"; 
#    print "\n";
    exit;
}


sub split_code {
    my @splits;
    my $code = $_[0];
    @splits = split /:/, $code;
    return @splits;
}

# the following is deprecated (not even documented in last release)
# and should probably just be eliminated

sub simple_count {
    my (%trans_counter,%tm_counter,%aux_counter,%verb_counter,%period_counter,@splits);
    foreach my $code (@codes) {
	@splits = &split_code($code);
	++$trans_counter{$splits[1]};
	++$tm_counter{$splits[2]};
	++$aux_counter{$splits[3]};
	++$verb_counter{$splits[4]};
	++$period_counter{$splits[5]};
    }
    print "The following transitivity codes were found:\n";
    for (sort (keys %trans_counter)) {
	printf "%-12s %5d\n", $_, $trans_counter{$_};
    }
    print "The following tense/mood codes were found:\n";
    for (sort (keys %tm_counter)) {
	printf "%-12s %5d\n", $_, $tm_counter{$_};
    }
    print "The following auxiliary codes were found:\n";
    for (sort (keys %aux_counter)) {
	printf "%-12s %5d\n", $_, $aux_counter{$_};
    }
    print "The following verb codes were found:\n";
    for (sort (keys %verb_counter)) {
	printf "%-12s %5d\n", $_, $verb_counter{$_};
    }
    print "The following period codes were found:\n";
    for (sort (keys %period_counter)) {
	printf "%-12s %5d\n", $_, $period_counter{$_};
    }
}

sub by_value { $ranker{$b} <=> $ranker{$a} }

sub restrict_codes {
    my ($column,$string,@in_codes) = @_;
    my @out_codes;
    my $neg = 0;
    if ($string =~ /^NOT\//) {
	$string =~ s/NOT\///;
	$neg = 1;
    }
    for my $code (@in_codes) {
	my @split = &split_code($code);
	my $file = pop @split; # pop file so it doesn't screw up following
	next unless $split[$column];
	if ($regex) {   # --regex option lets you specify stuff with regexes
	    if ($neg == 1) {
		if ($split[$column] !~ /$string/) {
		    push @out_codes, $code;
		}	
	    }
	    else {
		if ($split[$column] =~ /$string/) {
		    push @out_codes, $code;
		}
	    }
	}
	else {          # otherwise it matches literally
	    if ($neg == 1) {
		if ($split[$column] ne $string) {
		    push @out_codes, $code;
		}	
	    }
	    else {
		if ($split[$column] eq $string) {
		    push @out_codes, $code;
		}
	    }
	}
    }
    return @out_codes;
}

sub produce_rank {
    for my $code (@_) {
	my @split = &split_code($code);
	my $file = pop @split;
	++$ranker{$split[$rank]} if $split[$rank]; 
    }                                              
    my @rank = sort by_value keys %ranker;
    print "The following appeared in column $rank in codes matching ",
    "your query:\n";
    for (@rank) {
	printf "%-15s %5d\n", "$_:", $ranker{$_};
    }
}

sub produce_grid {
    my @coord = split /:/, $xy;
    my ($x, $y) = @coord or die "Invalid specification for grid\n";
    my (%grid_counter, %xcounter, %ycounter);
    for my $code (@_) {
	my @split = &split_code($code);
	my $file = pop @split;
	my $xvalue = $split[$x] or next; # next skips codings strings that  
	my $yvalue = $split[$y] or next; # are missing the relevant column
	++$grid_counter{$yvalue}{$xvalue};
	++$xcounter{$xvalue};
	++$ycounter{$yvalue};
    }
    print "Here's your grid:\n";
    print "          ";
    for (sort (keys %xcounter)) {
	print "\t$_";
    }    
    print "\n";
    my ($xaxis, $yaxis, @xitems);
    foreach $yaxis (sort (keys %ycounter)) {
	printf "%-10s", $yaxis;
	foreach $xaxis (sort (keys %xcounter)) {
	    if ($grid_counter{$yaxis}{$xaxis}) {
		print "\t$grid_counter{$yaxis}{$xaxis}";
	    }
	    else {
		print "\t0";
	    }
	}
	print "\n";
    }
}

# the line marked hmm is to deal with errors from codes that don't
# have the right number of columns.  it's a bit ugly, cause this issue
# is mostly dealt with in restrict_codes, but if no restrictions are
# given, that never gets called, so we may still get errors.  should
# be a better way to deal with this centrally.  5.9.2005

sub list_list {
    my %counter;
    for my $code (@_) {
	my @split = &split_code($code);
	my $file = pop @split;
	++$counter{$split[$list]} if $split[$list]; # hmm
    }
    print "Here are the codes that fit your query:\n";
    for (sort (keys %counter)) {
	printf "%-10s %5d\n", "$_:", $counter{$_};
    }
}

# pretty-printing fixed up a bit 26.8.2005

sub report {
    my @restricted_codes = @_;
    print scalar @restricted_codes, " codes matched your query:\n";
    my $counter = 1;
    printf "%5s%6s %-38s %-29s\n", "\#", "line no.", "code", "filename";
    for my $code (@restricted_codes) {
	my $copy = $code; # so that the substitution leaves orig. alone
	my @split = &split_code($copy);
	my $file = $split[-1];
	my $linenum = $split[0];
	$copy =~ s/$linenum://;
	$copy =~ s/:$file//;
	if (length($file) > 29) {
	    $file =~ s/(.{26}).*/$1.../;
	}
	printf "%5d%6d %-38s %-29s\n", $counter, $linenum, $copy, $file;
	++$counter;
    }
}

sub edit {
    my $code = shift;
    my @split = &split_code($code);
    my $file = $split[-1];
    my $linenum = $split[0];
    system("emacs +$linenum $file") and die "Could not start emacs\n";
    # bug fixed 26.8.2005: have to use and, not or on system call,
    # since unix commands return 0 on success.  duh.
}

if ($xy) {
    unless ($xy =~ /^\d+:\d+$/) {
	die "Value \"$xy\" invalid for option s (number:number expected)\n",
	"You may have typed -xy instead of --xy or -x.\n",
	"Aborting...\n";
    }
}

foreach my $file (@ARGV) {
    open(INPUT, "<$file") or die "Could not open file $file : $!\n";
    while (<INPUT>) {
	if (my $code = &find_code_string($_)) {
	    $code = "$.:" . $code . ":$file";
	    push @codes, $code;
	}
    }
    close INPUT or warn "Error closing file $file: $!\n";
}   

if ($count) {
    &simple_count;
    exit;
}

# the following now makes use of the %cols hash for column options
# rather than the old ugly symbolic reference stuff.

my @restricted_codes = @codes;
for my $option (1..20) {
    my $string;
    no strict 'refs';
    if ($cols{$option}) {
	@restricted_codes = &restrict_codes($option,
					    $cols{$option},@restricted_codes);
    }
    use strict 'refs';
}
if ($rank) {
    &produce_rank(@restricted_codes);
    exit;
}
if ($list) {
    &list_list(@restricted_codes);
    exit;
}
if ($xy) {
    &produce_grid(@restricted_codes);
    exit;
}
&report(@restricted_codes);
if ($quit) {
    exit;
}
if ($edit) {
    foreach my $code (@restricted_codes) {
	print "Enter to view next code in emacs, q to quit.\n> ";
	chomp (my $response = <STDIN>);
	if ($response eq "q") {
	    exit;
	}		
	else {
	    &edit($code);
	}
    }
    exit;
}
while (1) {
    print "To view a hit in emacs, enter its ",
    "number, or q to quit.\n> ";
    chomp (my $response = <STDIN>);
    if ($response eq "q") {
	exit;
    }
    else {
	my $index = ($response - 1);
	my $code = $restricted_codes[$index];
	unless ($code) {
	    print "Sorry, no such hit!\n";
	    next;
	}
	&edit($code);
    }
}
